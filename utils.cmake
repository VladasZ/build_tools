
set(CMAKE_CXX_STANDARD 17)

if (WIN32)
  add_definitions(-DWINDOWS)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
elseif (APPLE)
  add_definitions(-DAPPLE)
  add_definitions(-DMAC_OS)
else()
  add_definitions(-DLINUX)
endif()

if(${DESKTOP_BUILD})
  add_definitions(-DDESKTOP_BUILD)
endif()

if(${IOS_BUILD})
  add_definitions(-DIOS_BUILD)
endif()

function(get_subdirs out dir)
  file(GLOB children RELATIVE ${dir} ${dir}/*)
  foreach(child ${children})
    if (IS_DIRECTORY ${dir}/${child})
      list(APPEND out ${child})
    endif()
  endforeach()
  set(${out} ${${out}} PARENT_SCOPE)
endfunction()

function(get_files out dir)
  file(GLOB children RELATIVE ${dir} ${dir}/*)
  foreach(child ${children})
    if (NOT IS_DIRECTORY ${child})
      list(APPEND out ${child})
    endif()
  endforeach()
  set(${out} ${${out}} PARENT_SCOPE)
endfunction()

function(add_catalog_recursive catalog group_catalog source_files)
  file(GLOB children RELATIVE ${catalog} ${catalog}/*)
  foreach(child ${children})
    if(IS_DIRECTORY ${catalog}/${child})
      add_catalog_recursive(${catalog}/${child} ${group_catalog}/${child} ${source_files})
    else()
      get_filename_component(extension ${child} EXT)
      if (NOT extension STREQUAL "")
		if (${IOS_BUILD})
          string(REGEX MATCHALL "^.*.[h|m|mm|cpp]" out ${extension})
		else()
          string(REGEX MATCHALL "^.*.[h|cpp]" out ${extension})
		endif()
        if (NOT out STREQUAL "")
          if(MSVC)
            string(REPLACE "/" "\\" group_catalog_name ${group_catalog})   
          else()
            set(group_catalog_name ${group_catalog})
          endif()
          set(filename ${catalog}/${child})
          source_group(${group_catalog_name} FILES ${filename})
          include_directories(${catalog})
          set(${source_files} ${${source_files}} ${filename})

        endif()
      endif()
    endif()        
  endforeach()
  set(${source_files} ${${source_files}} PARENT_SCOPE)
endfunction(add_catalog_recursive)

function(include_recursive catalog)
  file(GLOB children RELATIVE ${catalog} ${catalog}/*)
  foreach(child ${children})
    if(IS_DIRECTORY ${catalog}/${child})
      include_recursive(${catalog}/${child})
    else()
      include_directories(${catalog})
    endif()        
  endforeach()
endfunction(include_recursive)

function(link_project linked_project_name)
  include_recursive(${PROJECT_SOURCE_DIR}/../${linked_project_name})
  target_link_libraries(${PROJECT_NAME} ${linked_project_name})
endfunction(link_project)

function(link_project_at_path linked_project_name path)
  include_recursive(${path})
  target_link_libraries(${PROJECT_NAME} ${linked_project_name})
endfunction(link_project_at_path)

macro(setup_conan_if_needed)
if(${NEEDS_CONAN})
  conan_basic_setup()
endif()
endmacro()

macro(link_conan_if_needed)
if(${NEEDS_CONAN})
conan_target_link_libraries(${PROJECT_NAME})
endif()
endmacro()

macro(link_deps)
foreach(var ${GIT_DEPENDENCIES})
  if(NOT ${var} STREQUAL ${PROJECT_NAME})
    link_project_at_path(${var} ${${var}_path})
  endif()
endforeach()
endmacro()

macro(setup_lib lib)
project(${lib})
add_catalog_recursive(${PROJECT_SOURCE_DIR} /source SOURCE)
add_library(${PROJECT_NAME} ${SOURCE})
link_conan_if_needed()
link_deps()
endmacro()

macro(setup_exe exe)
project(${exe})
add_catalog_recursive(${PROJECT_SOURCE_DIR} /source SOURCE)
add_executable(${PROJECT_NAME} ${SOURCE})
link_conan_if_needed()
link_deps()
endmacro()

macro(setup_deps)
if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
  foreach(var ${GIT_DEPENDENCIES_PATHS})
  add_subdirectory(${var} "${var}/dep_build")
  endforeach()
endif()
endmacro()

macro(setup_project project)
project(${project})
setup_conan_if_needed()
setup_deps()
endmacro()
