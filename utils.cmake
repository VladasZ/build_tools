function(get_subdirs out dir)
    file(GLOB children RELATIVE ${dir} ${dir}/*)
    foreach(child ${children})
        if (IS_DIRECTORY ${dir}/${child})
            list(APPEND out ${child})
        endif()
    endforeach()
    set(${out} ${${out}} PARENT_SCOPE)
endfunction()

function(get_files out dir)
    file(GLOB children RELATIVE ${dir} ${dir}/*)
    foreach(child ${children})
        if (NOT IS_DIRECTORY ${child})
            list(APPEND out ${child})
        endif()
    endforeach()
    set(${out} ${${out}} PARENT_SCOPE)
endfunction()

function(add_catalog_recursive catalog group_catalog source_files)
    file(GLOB children RELATIVE ${catalog} ${catalog}/*)
    foreach(child ${children})
        if(IS_DIRECTORY ${catalog}/${child})
            add_catalog_recursive(${catalog}/${child} ${group_catalog}/${child} ${source_files})
        else()
            get_filename_component(extension ${child} EXT)
            if (NOT extension STREQUAL "")
                string(REGEX MATCHALL "^.*.[h|cpp]" out ${extension})
                if (NOT out STREQUAL "")
                    if(MSVC)
                        string(REPLACE "/" "\\" group_catalog_name ${group_catalog})   
                    else()
                        set(group_catalog_name ${group_catalog})
                    endif()
                    set(filename ${catalog}/${child})
                    source_group(${group_catalog_name} FILES ${filename})
                    include_directories(${catalog})
                    set(${source_files} ${${source_files}} ${filename})
                endif()
            endif()
        endif()        
    endforeach()
    set(${source_files} ${${source_files}} PARENT_SCOPE)
endfunction(add_catalog_recursive)

function(include_recursive catalog)
    file(GLOB children RELATIVE ${catalog} ${catalog}/*)
    foreach(child ${children})
        if(IS_DIRECTORY ${catalog}/${child})
            include_recursive(${catalog}/${child})
        else()
            include_directories(${catalog})
        endif()        
    endforeach()
endfunction(include_recursive)

function(link_project linked_project_name)
    include_recursive(${PROJECT_SOURCE_DIR}/../${linked_project_name})
    target_link_libraries(${PROJECT_NAME} ${linked_project_name})
endfunction(link_project)

SET(CONAN_BUILD_INFO ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
